/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 public/models/WawaOffice.glb -t 
*/

import { useGLTF, useScroll } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import gsap from "gsap";
import { useLayoutEffect, useRef } from "react";
import * as THREE from "three";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    ["01_office"]: THREE.Mesh;
    ["02_library"]: THREE.Mesh;
    ["03_attic"]: THREE.Mesh;
  };
  materials: {
    ["01"]: THREE.MeshStandardMaterial;
    ["02"]: THREE.MeshStandardMaterial;
    ["03"]: THREE.MeshStandardMaterial;
  };
  animations: any;
};

export const FLOOR_HEIGHT = 2.3;
export const NB_FLOORS = 3;

export function Office(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("./models/WawaOffice.glb") as GLTFResult;
  const ref = useRef<THREE.Group>(null);
  const tl = useRef<GSAPTimeline>();

  const scroll = useScroll();

  useFrame(() => {
    if (!tl.current) return;
    tl.current.seek(scroll.offset * tl.current.duration());
  });

  useLayoutEffect(() => {
    tl.current = gsap.timeline();
    if (!ref.current) return;

    tl.current.to(
      ref.current.position,
      {
        duration: 2,
        y: -FLOOR_HEIGHT * (NB_FLOORS - 1)
      },
      0
    );
  }, []);

  return (
    <group {...props} dispose={null} ref={ref}>
      <mesh geometry={nodes["01_office"].geometry} material={materials["01"]} />
      <mesh
        geometry={nodes["02_library"].geometry}
        material={materials["02"]}
        position={[0, 2.114, -2.23]}
      />
      <mesh
        geometry={nodes["03_attic"].geometry}
        material={materials["03"]}
        position={[-1.97, 4.227, -2.199]}
      />
    </group>
  );
}
